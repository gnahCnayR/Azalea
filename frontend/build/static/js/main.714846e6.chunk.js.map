{"version":3,"sources":["components/QueryInput.js","components/ModelSelector.js","components/SearchResults.js","components/ErrorMessage.js","config.js","App.js","index.js"],"names":["QueryInput","_ref","query","setQuery","error","setError","_jsxs","className","children","_jsx","htmlFor","id","type","value","onChange","e","target","trim","placeholder","concat","ModelSelector","selectedModel","setSelectedModel","handleSearch","isLoading","conversationId","map","model","onClick","disabled","SearchResults","result","ecoMetrics","energyUsage","treesSaved","drivingAvoided","ErrorMessage","message","role","config","API_URL","App","useState","setResult","setConversationId","setIsLoading","async","console","log","window","open","response","axios","post","data","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.714846e6.chunk.js","sourcesContent":["import React from 'react';\n\nexport const QueryInput = ({ query, setQuery, error, setError }) => {\n  const handleChange = (e) => {\n    setQuery(e.target.value);\n    if (e.target.value.trim() === '') {\n      setError('Query cannot be empty');\n    }\n  };\n\n  return (\n    <div className=\"mb-6\">\n      <label htmlFor=\"query\" className=\"block text-sm font-medium text-gray-700 mb-2\">Enter your query</label>\n      <input\n        id=\"query\"\n        type=\"text\"\n        value={query}\n        onChange={handleChange}\n        placeholder=\"What would you like to know?\"\n        className={`w-full p-3 border rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 ${\n          error ? 'border-red-500' : 'border-gray-300'\n        }`}\n      />\n      {error && <p className=\"mt-2 text-sm text-red-600\">{error}</p>}\n    </div>\n  );\n};\n\nexport default QueryInput;","import React from 'react';\n\nexport const ModelSelector = ({ selectedModel, setSelectedModel, handleSearch, isLoading, query, conversationId }) => (\n  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-6\">\n    {['google', 'chatgpt', 'mistral'].map((model) => (\n      <div key={model} className=\"border border-gray-200 p-4 rounded-md shadow-sm hover:shadow-md transition-shadow\">\n        <h2 className=\"text-xl font-bold mb-3 capitalize\">{model}</h2>\n        <button\n          onClick={() => {\n            setSelectedModel(model);\n            handleSearch(model); // This should trigger the function passed from App.js\n          }}\n          disabled={isLoading}\n          className={`...`}\n        >\n            Use {model}\n        </button>\n      </div>\n    ))}\n  </div>\n);\n\nexport default ModelSelector;\n\n\n","import React from 'react';\n\nexport const SearchResults = ({ result }) => (\n  <div className=\"border border-gray-200 p-6 rounded-md shadow-md\">\n    <h2 className=\"text-2xl font-bold mb-4\">Search Results</h2>\n    <p className=\"mb-6 text-gray-700\">{result.result}</p>\n    {result.ecoMetrics.energyUsage !== \"N/A\" && (\n      <div className=\"bg-green-50 p-4 rounded-md\">\n        <h3 className=\"font-bold text-green-800 mb-2\">Eco Metrics:</h3>\n        <ul className=\"space-y-2\">\n          <li className=\"flex items-center\">\n            <span className=\"w-40\">Energy Usage:</span>\n            <span className=\"font-medium\">{result.ecoMetrics.energyUsage} kWh</span>\n          </li>\n          <li className=\"flex items-center\">\n            <span className=\"w-40\">Trees Saved:</span>\n            <span className=\"font-medium\">{result.ecoMetrics.treesSaved}</span>\n          </li>\n          <li className=\"flex items-center\">\n            <span className=\"w-40\">Driving Avoided:</span>\n            <span className=\"font-medium\">{result.ecoMetrics.drivingAvoided} miles</span>\n          </li>\n        </ul>\n      </div>\n    )}\n  </div>\n);\n\nexport default SearchResults;","import React from 'react';\n\nconst ErrorMessage = ({ message }) => (\n  <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative\" role=\"alert\">\n    <span className=\"block sm:inline\">{message}</span>\n  </div>\n);\n\nexport default ErrorMessage;\n","const config = {\n    API_URL: 'http://localhost:5000/api'\n  };\n  \n  export default config;\n  ","import React, { useState } from 'react';\nimport axios from 'axios';\nimport QueryInput from './components/QueryInput';\nimport ModelSelector from './components/ModelSelector';\nimport SearchResults from './components/SearchResults';\nimport ErrorMessage from './components/ErrorMessage';\nimport config from './config';\n\nconst App = () => {\n  const [query, setQuery] = useState('');\n  const [selectedModel, setSelectedModel] = useState('');\n  const [result, setResult] = useState(null);\n  const [conversationId, setConversationId] = useState(null);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleSearch = async (model) => {\n    console.log(`Searching with model: ${model}`); // This should log to the console\n    setIsLoading(true);\n    setError(null);\n    try {\n      if (model === 'chatgpt') {\n        window.open(`https://chat.openai.com/`, '_blank');\n        setResult({\n          result: \"Please use your ChatGPT account to process this query: \" + query,\n          ecoMetrics: {\n            energyUsage: \"N/A\",\n            treesSaved: \"N/A\",\n            drivingAvoided: \"N/A\"\n          }\n        });\n      } else {\n        const response = await axios.post(`${config.API_URL}/query`, {\n          query,\n          model,\n          conversationId\n        });\n        setResult(response.data);\n        setConversationId(response.data.conversationId);\n      }\n      } catch (error) {\n        console.error('Error:', error);\n        setError('An error occurred while processing your request. Please try again.');\n      } finally {\n        setIsLoading(false);\n      }\n  };\n\n  return (\n    <div className=\"container mx-auto p-4\">\n      <h1 className=\"text-3xl font-bold mb-4\">Eco-Friendly AI Model Selector</h1>\n      <QueryInput query={query} setQuery={setQuery} />\n      <ModelSelector \n        selectedModel={selectedModel} \n        setSelectedModel={setSelectedModel}\n        handleSearch={handleSearch}\n        isLoading={isLoading}\n        query={query}\n        conversationId={conversationId}\n      />\n      {error && <ErrorMessage message={error} />}\n      {result && <SearchResults result={result} />}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}