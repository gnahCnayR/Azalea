{"version":3,"sources":["components/QueryInput.js","components/ModelSelector.js","components/SearchResults.js","components/ErrorMessage.js","config.js","App.js","index.js"],"names":["QueryInput","_ref","query","setQuery","error","setError","sendQuery","_jsxs","className","children","_jsx","htmlFor","id","type","value","onChange","e","target","trim","placeholder","concat","onClick","ModelSelector","selectedModel","setSelectedModel","handleSearch","isLoading","map","model","disabled","SearchResults","result","JSON","stringify","ErrorMessage","message","role","config","API_URL","App","useState","setResult","conversationId","setConversationId","setIsLoading","async","console","log","window","open","ecoMetrics","energyUsage","treesSaved","drivingAvoided","response","axios","method","url","data","headers","withCredentials","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.84f849c0.chunk.js","sourcesContent":["import React from 'react';\n\nconst QueryInput = ({ query, setQuery, error, setError, sendQuery }) => {\n  const handleChange = (e) => {\n    setQuery(e.target.value);\n    if (e.target.value.trim() === '') {\n      setError('Query cannot be empty');\n    } else {\n      setError('');\n    }\n  };\n\n  return (\n    <div className=\"mb-6\">\n      <label htmlFor=\"query\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n        Enter your query\n      </label>\n      <input\n        id=\"query\"\n        type=\"text\"\n        value={query}\n        onChange={handleChange}\n        placeholder=\"What would you like to know?\"\n        className={`w-full p-3 border rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 ${\n          error ? 'border-red-500' : 'border-gray-300'\n        }`}\n      />\n      {error && <p className=\"mt-2 text-sm text-red-600\">{error}</p>}\n      <button\n        onClick={sendQuery}\n        className=\"mt-4 w-full bg-indigo-600 text-white py-2 px-4 rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 transition-colors\"\n      >\n        Calculate\n      </button>\n    </div>\n  );\n};\n\nexport default QueryInput;","import React from 'react';\n\nconst ModelSelector = ({ selectedModel, setSelectedModel, handleSearch, isLoading }) => {\n  const models = ['google', 'chatgpt', 'mistral'];\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-6\">\n      {models.map((model) => (\n        <div key={model} className=\"border border-gray-200 p-4 rounded-md shadow-sm hover:shadow-md transition-shadow\">\n          <h2 className=\"text-xl font-bold mb-3 capitalize\">{model}</h2>\n          <button\n            onClick={() => {\n              setSelectedModel(model);\n              handleSearch(model);\n            }}\n            disabled={isLoading}\n            className={`w-full py-2 px-4 rounded-md transition-colors ${\n              selectedModel === model\n                ? 'bg-indigo-600 text-white hover:bg-indigo-700'\n                : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\n            }`}\n          >\n            Use {model}\n          </button>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default ModelSelector;","import React from 'react';\n\n// simplified for sake of making work\n\nconst SearchResults = ({ result }) => (\n  <pre>{JSON.stringify(result, null, 2)}</pre>\n);\n\nexport default SearchResults;","import React from 'react';\n\nconst ErrorMessage = ({ message }) => (\n  <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative\" role=\"alert\">\n    <span className=\"block sm:inline\">{message}</span>\n  </div>\n);\n\nexport default ErrorMessage;\n","const config = {\n  API_URL: 'http://127.0.0.1:8000'\n};\n\nexport default config;\n  ","import React, { useState } from 'react';\nimport axios from 'axios';\nimport QueryInput from './components/QueryInput';\nimport ModelSelector from './components/ModelSelector';\nimport SearchResults from './components/SearchResults';\nimport ErrorMessage from './components/ErrorMessage';\nimport config from './config';\n\nconst App = () => {\n  const [query, setQuery] = useState('');\n  const [selectedModel, setSelectedModel] = useState('');\n  const [result, setResult] = useState(null);\n  const [conversationId, setConversationId] = useState(null);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleSearch = async (model) => {\n    console.log(`Searching with model: ${model}`);\n    console.log(`Searching at: ${config.API_URL}/query/`);\n    setIsLoading(true);\n    setError(null);\n    \n    console.log('Trying to get response...');\n    try {\n      if (model === 'chatgpt') {\n        window.open(`https://chat.openai.com/`, '_blank');\n        setResult({\n          result: \"Please use your ChatGPT account to process this query: \" + query,\n          ecoMetrics: {\n            energyUsage: \"N/A\",\n            treesSaved: \"N/A\",\n            drivingAvoided: \"N/A\"\n          }\n        });\n      } else {\n        const response = await axios({\n          method: 'post',\n          url: `${config.API_URL}/query/`,\n          data: {\n            query: query,\n            model: model,\n            conversationId: conversationId\n          },\n          headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json'\n          },\n          withCredentials: true\n        });\n        console.log('Received response...');\n        console.log('Response:', response.data);\n        \n        setResult(response.data);\n        setConversationId(response.data.conversationId);\n      }\n    } catch (error) {\n      console.error('Error:', error.response ? error.response.data : error.message);\n      setError('An error occurred while processing your request. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n    console.log('Search process completed.');\n  };\n\n  return (\n    <div className=\"container mx-auto p-4\">\n      <h1 className=\"text-3xl font-bold mb-4\">Eco-Friendly AI Model Selector</h1>\n      <QueryInput query={query} setQuery={setQuery} />\n      <ModelSelector \n        selectedModel={selectedModel} \n        setSelectedModel={setSelectedModel}\n        handleSearch={handleSearch}\n        isLoading={isLoading}\n        query={query}\n        conversationId={conversationId}\n      />\n      {error && <ErrorMessage message={error} />}\n      {result && <SearchResults result={result} />}\n    </div>\n  );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n// var cors = require('cors')\n\n// App.use(cors()) // Use this after the variable declaration\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}